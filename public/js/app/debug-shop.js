/**
 * Script de d√©bogage pour le shop
 * √Ä ex√©cuter dans la console du navigateur pour diagnostiquer les probl√®mes
 */

// Fonctions de debug globales
window.debugShop = {
    // V√©rifier si la section shop est visible
    checkShopVisibility: function() {
        const shopSection = document.getElementById('section-shop');
        if (!shopSection) {
            console.log('‚ùå Section shop non trouv√©e');
            return false;
        }
        
        const isHidden = shopSection.classList.contains('hidden');
        console.log(`üìç Section shop: ${isHidden ? 'CACH√âE' : 'VISIBLE'}`);
        console.log('üìç Classes de la section:', shopSection.className);
        return !isHidden;
    },
    
    // V√©rifier si le distributeur existe
    checkDistributeur: function() {
        const distributeur = document.getElementById('distributeur-bouton');
        if (!distributeur) {
            console.log('‚ùå Distributeur non trouv√©');
            return false;
        }
        
        console.log('‚úÖ Distributeur trouv√©');
        console.log('üìç √âv√©nements attach√©s:', distributeur.getAttribute('data-event-attached'));
        console.log('üìç Classes du distributeur:', distributeur.className);
        return true;
    },
    
    // Forcer l'initialisation des √©v√©nements
    forceInitEvents: function() {
        console.log('üîß For√ßage de l\'initialisation des √©v√©nements...');
        if (typeof initShopEvents === 'function') {
            initShopEvents();
            console.log('‚úÖ √âv√©nements r√©initialis√©s');
        } else {
            console.log('‚ùå Fonction initShopEvents non trouv√©e');
        }
    },
    
    // Aller √† la section shop
    goToShop: function() {
        console.log('üè™ Navigation vers le shop...');
        const shopLink = document.querySelector('[data-section="shop"]');
        if (shopLink) {
            shopLink.click();
            console.log('‚úÖ Clic sur le lien shop effectu√©');
            
            // V√©rifier apr√®s un d√©lai
            setTimeout(() => {
                this.checkShopVisibility();
                this.checkDistributeur();
            }, 200);
        } else {
            console.log('‚ùå Lien shop non trouv√©');
        }
    },
    
    // Test complet
    fullTest: function() {
        console.log('üîç === TEST COMPLET DU SHOP ===');
        
        // 1. V√©rifier la navigation
        console.log('\n1Ô∏è‚É£ V√©rification de la navigation...');
        const shopLink = document.querySelector('[data-section="shop"]');
        console.log('Lien shop:', shopLink ? '‚úÖ Trouv√©' : '‚ùå Non trouv√©');
        
        // 2. V√©rifier la section
        console.log('\n2Ô∏è‚É£ V√©rification de la section...');
        this.checkShopVisibility();
        
        // 3. Aller au shop si pas visible
        if (!this.checkShopVisibility()) {
            console.log('\n3Ô∏è‚É£ Navigation vers le shop...');
            this.goToShop();
            
            // Test apr√®s navigation
            setTimeout(() => {
                console.log('\n4Ô∏è‚É£ Test apr√®s navigation...');
                this.checkShopVisibility();
                this.checkDistributeur();
                this.testDistributeurClick();
            }, 500);
        } else {
            console.log('\n3Ô∏è‚É£ Test du distributeur...');
            this.checkDistributeur();
            this.testDistributeurClick();
        }
    },
    
    // Tester le clic sur le distributeur
    testDistributeurClick: function() {
        console.log('\nüé∞ Test du clic sur le distributeur...');
        const distributeur = document.getElementById('distributeur-bouton');
        
        if (!distributeur) {
            console.log('‚ùå Distributeur non trouv√©');
            return;
        }
        
        // V√©rifier les √©v√©nements
        const events = getEventListeners ? getEventListeners(distributeur) : 'Non disponible (utilisez Chrome DevTools)';
        console.log('üìç √âv√©nements du distributeur:', events);
        
        // Test de clic manuel
        console.log('üñ±Ô∏è Simulation d\'un clic...');
        try {
            distributeur.click();
            console.log('‚úÖ Clic simul√© avec succ√®s');
        } catch (error) {
            console.log('‚ùå Erreur lors du clic:', error);
        }
    },
    
    // V√©rifier l'√©tat des variables globales
    checkGlobalState: function() {
        console.log('\nüìä √âtat des variables globales:');
        console.log('userBalance:', typeof userBalance !== 'undefined' ? userBalance : 'Non d√©fini');
        console.log('boosterConfig:', typeof boosterConfig !== 'undefined' ? boosterConfig : 'Non d√©fini');
        console.log('distributeurAnimating:', typeof distributeurAnimating !== 'undefined' ? distributeurAnimating : 'Non d√©fini');
        console.log('shopEventsInitialized:', typeof shopEventsInitialized !== 'undefined' ? shopEventsInitialized : 'Non d√©fini');
        
        // V√©rifier le token
        const token = localStorage.getItem('token');
        console.log('Token pr√©sent:', token ? '‚úÖ Oui' : '‚ùå Non');
    },
    
    // Ajouter manuellement l'√©v√©nement au distributeur
    attachDistributeurEvent: function() {
        console.log('üîß Ajout manuel de l\'√©v√©nement au distributeur...');
        const distributeur = document.getElementById('distributeur-bouton');
        
        if (!distributeur) {
            console.log('‚ùå Distributeur non trouv√©');
            return;
        }
        
        // Supprimer les anciens √©v√©nements
        const newDistributeur = distributeur.cloneNode(true);
        distributeur.parentNode.replaceChild(newDistributeur, distributeur);
        
        // Ajouter le nouvel √©v√©nement
        newDistributeur.addEventListener('click', function(event) {
            console.log('üé∞ CLIC D√âTECT√â SUR LE DISTRIBUTEUR !', event);
            
            // Appeler la fonction si elle existe
            if (typeof handleDistributeurClick === 'function') {
                handleDistributeurClick.call(this, event);
            } else {
                console.log('‚ùå Fonction handleDistributeurClick non trouv√©e');
                
                // Test simple
                alert('Distributeur cliqu√© ! (test simple)');
            }
        });
        
        console.log('‚úÖ √âv√©nement ajout√© manuellement');
    },
    
    // Instructions pour l'utilisateur
    help: function() {
        console.log(`
üÜò === AIDE D√âBOGAGE SHOP ===

Commandes disponibles:
‚Ä¢ debugShop.fullTest() - Test complet
‚Ä¢ debugShop.goToShop() - Aller au shop  
‚Ä¢ debugShop.checkDistributeur() - V√©rifier le distributeur
‚Ä¢ debugShop.testDistributeurClick() - Tester le clic
‚Ä¢ debugShop.attachDistributeurEvent() - Forcer l'√©v√©nement
‚Ä¢ debugShop.checkGlobalState() - V√©rifier les variables
‚Ä¢ debugShop.forceInitEvents() - R√©initialiser les √©v√©nements

üìã √âTAPES DE DIAGNOSTIC:
1. Ex√©cutez debugShop.fullTest()
2. Si le distributeur ne r√©pond pas, essayez debugShop.attachDistributeurEvent()
3. V√©rifiez les erreurs dans la console
4. Assurez-vous d'√™tre connect√© (token pr√©sent)

üêõ PROBL√àMES COURANTS:
‚Ä¢ Section shop cach√©e ‚Üí Cliquez sur "Shop" dans le menu
‚Ä¢ Pas d'√©v√©nements ‚Üí Ex√©cutez attachDistributeurEvent()
‚Ä¢ Pas de token ‚Üí Connectez-vous d'abord
‚Ä¢ Erreurs JS ‚Üí V√©rifiez la console pour plus de d√©tails
        `);
    }
};

// Message d'aide automatique
console.log('üîß Outils de d√©bogage du shop charg√©s !');
console.log('üìñ Tapez debugShop.help() pour voir les commandes disponibles');
console.log('üöÄ Ou tapez debugShop.fullTest() pour un test complet');

// Auto-diagnostic au chargement si on est sur le shop
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        const shopSection = document.getElementById('section-shop');
        if (shopSection && !shopSection.classList.contains('hidden')) {
            console.log('üè™ Shop d√©tect√© comme visible, lancement du diagnostic...');
            window.debugShop.fullTest();
        }
    }, 1000);
});