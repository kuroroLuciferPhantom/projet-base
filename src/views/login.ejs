<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="/css/auth.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <!-- Ethers.js pour Web3 depuis cdnjs - sans attribut integrity pour éviter les problèmes de validation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/5.7.2/ethers.umd.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body>
    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <a href="/" class="auth-logo">
                    <span class="logo-text">CRYPTO<span class="logo-text-highlight">CARDS</span></span>
                </a>
                <h1>Connexion</h1>
            </div>
            
            <form id="login-form" class="auth-form">
                <div class="form-group">
                    <label for="email">Email</label>
                    <div class="input-with-icon">
                        <i class="fas fa-envelope"></i>
                        <input type="email" id="email" name="email" required>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="password">Mot de passe</label>
                    <div class="input-with-icon">
                        <i class="fas fa-lock"></i>
                        <input type="password" id="password" name="password" required>
                    </div>
                </div>
                
                <div class="form-actions">
                    <div class="remember-me">
                        <input type="checkbox" id="remember" name="remember">
                        <label for="remember">Se souvenir de moi</label>
                    </div>
                    <a href="#" class="forgot-password">Mot de passe oublié?</a>
                </div>
                
                <button type="submit" class="btn btn-primary btn-block">Se connecter</button>
                
                <div class="auth-separator">
                    <span>ou</span>
                </div>
                
                <button type="button" class="btn btn-outline btn-block connect-wallet">
                    <i class="fas fa-wallet"></i>
                    Connecter avec Wallet
                </button>
            </form>
            
            <div class="auth-footer">
                <p>Vous n'avez pas de compte? <a href="/register">S'inscrire</a></p>
            </div>
        </div>
    </div>
    
    <!-- Modals pour les erreurs wallet -->
    <div class="modal" id="wallet-error-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Erreur de connexion</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <p id="wallet-error-message">Une erreur est survenue lors de la connexion au wallet.</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary modal-close">OK</button>
            </div>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Vérifier que la bibliothèque ethers est chargée
            if (typeof window.ethers === 'undefined') {
                if (typeof ethers !== 'undefined') {
                    window.ethers = ethers;
                    console.log("Bibliothèque ethers exposée globalement");
                } else {
                    console.error("La bibliothèque ethers.js n'est pas chargée correctement");
                }
            }
            
            const loginForm = document.getElementById('login-form');
            const connectWalletButton = document.querySelector('.connect-wallet');
            
            // Variables globales pour la connexion wallet
            let walletAddress = null;
            let chainId = null;
            let nonce = null;
            let signMessage = null;
            
            // Connexion par email/password
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const email = document.getElementById('email').value;
                const password = document.getElementById('password').value;
                
                try {
                    const response = await fetch('/auth/login', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ email, password })
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok && data.success) {
                        // Connexion réussie, rediriger vers l'application
                        localStorage.setItem('token', data.token);
                        window.location.href = '/app';
                    } else {
                        // Afficher l'erreur
                        showWalletError(data.message || 'Erreur de connexion');
                    }
                } catch (error) {
                    console.error('Erreur:', error);
                    showWalletError('Une erreur est survenue lors de la connexion');
                }
            });
            
            // Connexion avec wallet
            connectWalletButton.addEventListener('click', async function() {
                try {
                    // Vérifier si MetaMask est installé
                    if (typeof window.ethereum === 'undefined') {
                        throw new Error('MetaMask n\'est pas installé. Veuillez l\'installer pour continuer.');
                    }
                    
                    // Demander l'accès au compte
                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                    walletAddress = accounts[0];
                    
                    // Obtenir l'ID de la chaîne
                    chainId = await window.ethereum.request({ method: 'eth_chainId' });
                    
                    // Obtenir un nonce du serveur
                    await getNonce(walletAddress);
                    
                } catch (error) {
                    showWalletError(error.message);
                }
            });
            
            // Obtenir un nonce du serveur
            async function getNonce(address) {
                try {
                    const response = await fetch(`/api/wallet/nonce/${address}`);
                    const data = await response.json();
                    
                    if (data.success) {
                        nonce = data.nonce;
                        signMessage = data.signMessage;
                        
                        // Signer le message et se connecter
                        await signMessageAndConnect(signMessage);
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    showWalletError('Erreur lors de la récupération du nonce: ' + error.message);
                }
            }
            
            // Signer le message et se connecter
            async function signMessageAndConnect(message) {
                try {
                    // Vérifier que ethers est bien défini
                    if (typeof window.ethers === 'undefined' && typeof ethers === 'undefined') {
                        throw new Error('La bibliothèque ethers.js n\'est pas disponible');
                    }
                    
                    console.log("Message à signer:", message);
                    
                    // Utiliser la variable globale ethers si elle existe
                    const ethersLib = window.ethers || ethers;
                    const provider = new ethersLib.providers.Web3Provider(window.ethereum);
                    const signer = provider.getSigner();
                    const signature = await signer.signMessage(message);
                    
                    console.log("Signature générée:", signature.substring(0, 30) + '...');
                    
                    // Connexion avec le serveur
                    const response = await fetch('/api/wallet/connect', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            address: walletAddress,
                            signature,
                            nonce
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        // Sauvegarder le token dans localStorage
                        localStorage.setItem('token', data.token);
                        
                        // Redirection basée sur le statut de l'utilisateur
                        if (data.user.newUser) {
                            // Nouvel utilisateur - rediriger vers le tutoriel
                            window.location.href = '/app?tutorial=true';
                        } else {
                            // Utilisateur existant - rediriger vers l'application
                            window.location.href = '/app';
                        }
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    showWalletError('Erreur lors de la connexion: ' + error.message);
                }
            }
            
            // Afficher une erreur dans la modal
            function showWalletError(message) {
                document.getElementById('wallet-error-message').textContent = message;
                document.getElementById('wallet-error-modal').style.display = 'flex';
            }
            
            // Fermer la modal
            const closeButtons = document.querySelectorAll('.modal-close');
            closeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    this.closest('.modal').style.display = 'none';
                });
            });
            
            // Fermer la modal en cliquant à l'extérieur
            window.addEventListener('click', function(event) {
                if (event.target.classList.contains('modal')) {
                    event.target.style.display = 'none';
                }
            });
        });
    </script>
</body>
</html>